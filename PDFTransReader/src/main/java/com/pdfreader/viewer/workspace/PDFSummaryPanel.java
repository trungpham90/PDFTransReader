/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pdfreader.viewer.workspace;

import com.pdfreader.data.PDFReaderWorkSpace;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Map;
import org.jgraph.JGraph;
import org.jgraph.event.GraphSelectionEvent;
import org.jgraph.event.GraphSelectionListener;
import org.jgraph.graph.DefaultEdge;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.GraphConstants;
import org.jgrapht.ListenableGraph;
import org.jgrapht.ext.JGraphModelAdapter;
import org.jgrapht.graph.ListenableDirectedGraph;

/**
 *
 * @author Trung Pham
 */
public class PDFSummaryPanel extends javax.swing.JPanel {

    private static final Dimension DEFAULT_SIZE = new Dimension(530, 320);
    private JGraphModelAdapter graphAdapter;
    private JGraph graphGraphics;
    private ListenableGraph<PDFReaderWorkSpace.PDFSentenceNode , PDFReaderWorkSpace.PDFSentenceEdge> graph;

    /**
     * Creates new form PDFSummaryPanel
     */
    public PDFSummaryPanel() {
        super();
        initComponents();
        init();
    }

    private void init() {
        // create a JGraphT graph
        graph = new ListenableDirectedGraph(DefaultEdge.class);



        // create a visualization using JGraph, via an adapter
        graphAdapter = new JGraphModelAdapter(graph);

        graphGraphics = new JGraph(graphAdapter);

        // jgraph.setPreferredSize(DEFAULT_SIZE);
        graphGraphics.setBackground(Color.WHITE);

        add(graphGraphics, BorderLayout.CENTER);
        graphGraphics.addGraphSelectionListener(new GraphSelectionListener() {
            @Override
            public void valueChanged(GraphSelectionEvent e) {
                System.out.println(e.getCell());
            }
        });
        graphGraphics.revalidate();
        revalidate();

        // that's all there is to it!...
    }

    public void addVertex(PDFReaderWorkSpace.PDFSentenceNode node) {
        graph.addVertex(node);
        
       
        graphGraphics.revalidate();
        graphGraphics.repaint();
    }

    private void positionVertexAt(Object vertex, int x, int y) {
        DefaultGraphCell cell = graphAdapter.getVertexCell(vertex);
        Map attr = cell.getAttributes();
        Rectangle2D b = GraphConstants.getBounds(attr);

        GraphConstants.setBounds(attr, new Rectangle(x, y, (int) b.getWidth(), (int) b.getHeight()));

        Map cellAttr = new HashMap();
        cellAttr.put(cell, attr);

        graphAdapter.edit(cellAttr, null, null, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
