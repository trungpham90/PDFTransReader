/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.pdfreader.viewer.workspace;

import com.pdfreader.data.PDFReaderWorkSpace;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Rectangle2D;
import java.util.HashMap;
import java.util.Map;
import javax.swing.SwingUtilities;
import org.jgraph.JGraph;
import org.jgraph.event.GraphModelEvent;
import org.jgraph.event.GraphModelListener;
import org.jgraph.event.GraphSelectionEvent;
import org.jgraph.event.GraphSelectionListener;
import org.jgraph.graph.AttributeMap;
import org.jgraph.graph.DefaultEdge;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.GraphConstants;
import org.jgrapht.ListenableGraph;
import org.jgrapht.ext.JGraphModelAdapter;
import org.jgrapht.graph.ListenableDirectedGraph;

/**
 *
 * @author Trung Pham
 */
public class PDFSummaryPanel extends javax.swing.JPanel {

    private static final Dimension DEFAULT_SIZE = new Dimension(530, 320);
    private static final Color DEFAULT_NODE_COLOR = new Color(0x01A9DB);
    private JGraphModelAdapter graphAdapter;
    private JGraph graphGraphics;
    private ListenableGraph<PDFReaderWorkSpace.PDFSentenceNode, PDFReaderWorkSpace.PDFSentenceEdge> graph;
    private static final int startX = 50, startY = 50;
    private static final Font DEFAULT_FONT = new Font("Serif", Font.PLAIN, 12);

    /**
     * Creates new form PDFSummaryPanel
     */
    public PDFSummaryPanel() {
        super();
        initComponents();
        init();
    }

    private void init() {
        // create a JGraphT graph
        graph = new ListenableDirectedGraph(DefaultEdge.class);
        // create a visualization using JGraph, via an adapter
        graphAdapter = new JGraphModelAdapter(graph);
        graphAdapter.addGraphModelListener(new GraphModelListener() {
            @Override
            public void graphChanged(GraphModelEvent e) {
            }
        });

        graphGraphics = new JGraph(graphAdapter);

        // jgraph.setPreferredSize(DEFAULT_SIZE);
        graphGraphics.setBackground(Color.WHITE);

        add(graphGraphics, BorderLayout.CENTER);
        graphGraphics.addGraphSelectionListener(new GraphSelectionListener() {
            @Override
            public void valueChanged(GraphSelectionEvent e) {
                DefaultGraphCell cell = (DefaultGraphCell) e.getCell();
                AttributeMap map = cell.getAttributes();
                Rectangle2D b = GraphConstants.getBounds(map);

            }
        });
        
        graphGraphics.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent e) {
                System.out.println("Click!");
                System.out.println(graphGraphics.getFirstCellForLocation(e.getX(), e.getY()));
                
                
                
            }

            @Override
            public void mousePressed(MouseEvent e) {
              
            }

            @Override
            public void mouseReleased(MouseEvent e) {
              
            }

            @Override
            public void mouseEntered(MouseEvent e) {
              
            }

            @Override
            public void mouseExited(MouseEvent e) {
              
            }
        });
        graphGraphics.setConnectable(true);
        graphGraphics.revalidate();
        revalidate();

        // that's all there is to it!...
    }

    public void addVertex(PDFReaderWorkSpace.PDFSentenceNode node) {
        graph.addVertex(node);
        positionVertexAt(node, startX, startY);
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {               
                graphGraphics.refresh();
            }
        });    
        
    }

    private void positionVertexAt(PDFReaderWorkSpace.PDFSentenceNode vertex, int x, int y) {
        DefaultGraphCell cell = graphAdapter.getVertexCell(vertex);
        Map attr = cell.getAttributes();
        GraphConstants.setFont(attr, DEFAULT_FONT);
        GraphConstants.setBounds(attr, new Rectangle(x, y, 200, 50));
        GraphConstants.setBackground(attr, DEFAULT_NODE_COLOR);
        GraphConstants.setForeground(attr, Color.BLACK);
        Map cellAttr = new HashMap();
        cellAttr.put(cell, attr);

        graphAdapter.edit(cellAttr, null, null, null);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
